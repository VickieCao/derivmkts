%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{derivmkts Package Overview}
\documentclass{article}
\usepackage{textcomp}
\usepackage{amsmath}
\usepackage{listings}
    \lstset{
    language=R,
    tabsize=2,
    keepspaces,
    extendedchars=true,
    rulecolor=\color{black},
    basicstyle=\footnotesize\ttfamily,
    aboveskip=5pt,
    upquote=true,
    columns=fixed,
    showstringspaces=false,
    extendedchars=true,
    breaklines=true,
    frame=none,
    showtabs=true,
    showspaces=false,
    showstringspaces=false,
}

\title{Option Pricing Functions to Accompany \emph{Derivatives Markets}}
\author{Robert McDonald}
\date{\today}

\lstMakeShortInline{|}

<<echo=FALSE, message=FALSE, warning=FALSE>>=
library(highlight)
library(knitr)
##homedir <- '/home/rmcd/tex/d67/Rtutorial/'
options(digits=4)
figsize <- 4.5
opts_chunk$set(size='footnotesize', prompt=FALSE, comment=NA,
               fig.align='center', fig.width = figsize,
               fig.height=figsize, out.width='3.75in')

#              , fig.width=4.5*3.75/3.25, fig.height=4.5,
#              , out.width='3.75in', out.height='3.25in'
#               )
opts_knit$set(highlight = TRUE,
              eval.after='fig.cap',
              prompt=TRUE,
              renderer=renderer_latex(document=FALSE),
              size='footnotesize')
@


\begin{document}
\maketitle
\tableofcontents


<<echo=FALSE>>=
library(derivmkts)
library(markdown)

opts_chunk$set(collapse=TRUE)
@

\section{Introduction}

This vignette is an overview to the functions in the functions in the
\emph{derivmkts} package, which was conceived as a companion to my
book \emph{Derivatives Markets}. The material has an educational
focus. There are other option pricing packages for R, but this package
has several distinguishing features:
\begin{itemize}
\item function names (mostly) correspond to those in \emph{Derivatives
  Markets}.
\item vectorized Greek calculations are convenient both for individual
  options and for portfolios
\item the |quincunx| function illustrates the workings of a
  quincunx (Galton board).
\item binomial functions include a plotting function that provides a
  visual depiction of early exercise
\end{itemize}



\section{European Calls and Puts}


Table \ref{tab:bslist} lists the Black-Scholes related functions in
the package.  The functions |bscall|, |bsput|, and |bsopt| provide
basic pricing of European calls and puts. There are also options with
binary payoffs: cash-or-nothing and asset-or-nothing options. All of
these functions are vectorized. The function |bsopt| by default
provides option greeks. Here are some examples:

<<>>=
s <- 100; k <- 100; r <- 0.08; v <- 0.30; tt <- 2; d <- 0
bscall(s, k, v, r, tt, d)
bsput(s, c(95, 100, 105), v, r, tt, d)

@




\begin{table}[btp]
  \centering
  \begin{tabular}{cp{4in}}
    Function& Description \\ \hline
    bscall & European call\\
    bsput & European put\\
    bsopt & European call and put and associated Greeks: delta, gamma,
            vega, theta, rho, psi, and elasticity \\
    assetcall &  Asset-or-nothing call\\
    assetput &  Asset-or-nothing put\\
    cashcall &  Cash-or-nothing call\\
    cashput & Cash-or-nothing put
  \end{tabular}
  \caption{Black-Scholes related option pricing functions}
  \label{tab:bslist}
\end{table}

\section{Barrier Options}

There are pricing functions for the following barrier options:

\begin{itemize}
\item down-and-in and down-and-out barrier binary options
\item  up-and-in and up-and-out barrier binary options
\item  more standard
  down- and up- calls and puts, constructed using the barrier binary
  options
\end{itemize}
Naming for the barrier options generally follows the convention
\begin{verbatim}
[u|d][i|o][call|put]
\end{verbatim}
which means that the option is ``up'' or ``down'', ``in'' or ``out'', and a
call or put.\footnote{This naming convention differs from that in
  \emph{Derivatives Markets}, in which names are \lstinline{callupin},
  \lstinline{callupout}, etc. Thus, I have made both names are
  available for these functions.}  An up-and-in call, for example,
would be denoted by |uicall|. For binary options, we add the
underlying, which is either the asset or \$1: cash:

\begin{verbatim}
[asset|cash][u|d][i|o][call|put]
\end{verbatim}


<<>>=
H <- 115
bscall(s, c(80, 100, 120), v, r, tt, d)
uicall(s, c(80, 100, 120), v, r, tt, d, H)
bsput(s, c(80, 100, 120), v, r, tt, d)
uoput(s, c(80, 100, 120), v, r, tt, d, H)
@



\section{Option Greeks}

Greeks for vanilla and barrier options can be computed using the
|greeks| function, which is a wrapper for any pricing function that
returns the option price and which uses the default naming of
inputs.\footnote{In this version of the package, I have two
  alternative functions that return Greeks:
  \begin{itemize}
  \item The \lstinline{bsopt} function by default
    produces prices and Greeks for European calls and puts.
\item The \lstinline{greeks2} function takes as arguments the name of the pricing
  function and then inputs as a list.
\end{itemize}
These may be deprecated in the future.
}

<<>>=
H <- 105
greeks(uicall(s, k, v, r, tt, d, H))

@

The value of this approach is that you can easily compute Greeks for
spreads and custom pricing functions. Here are two examples Here is the formula for
a prepaid contract that pays $S_{T}^{a}$ at time $T$:
<<>>=
powercontract <- function(s, v, r, tt, d, a) {
    price <- exp(-r*tt)*s^a* exp((a*(r-d) + 1/2*a*(a-1)*v^2)*tt)
}
greeks(powercontract(s=40, v=.08, r=0.08, tt=0.25, d=0, a=2))
@

Compute the greeks for a spread by defining the value of the spread as
a function, and then computing the greeks for the function:
<<>>=
bullspread <- function(s, v, r, tt, d, k1, k2) {
    bscall(s, k1, v, r, tt, d) - bscall(s, k2, v, r, tt, d)
}
greeks(bullspread(39:41, .3, .08, 1, 0, k1=40, k2=45))

@

The Greeks function is vectorized, so you can create vectors of greek
values with a single call. This example plots, for a bull spread, the
gamma as a function of the stock price.
<<bullgamma, fig.cap='Gamma for a 40-45 bull spread.'>>=
sseq <- seq(1, 100, by=0.5)
x <- greeks(bullspread(sseq, .3, .08, 1, 0, k1=40, k2=45))
plot(sseq, x['Gamma',], type='l')

@


Here is a final example:
%%As an alternative, the |bsopt| function provides all option Greeks,
%%vectorized, for both puts and calls. See Figure \ref{fig:allgreeks}.
<<allgreeks, fig.cap='All option Greeks, plotted using bsopt', fig.width=7.5, fig.height=6.5>>=
k <- 100; r <- 0.08; v <- 0.30; tt <- 2; d <- 0
S <- seq(.5, 250, by=.5)
cgreeks <- greeks(bscall(S, k, v, r, tt, d))
pgreeks <- greeks(bsput(S, k, v, r, tt, d))
optlbl <-  c('Call', 'Put')
y <- list(cgreeks, pgreeks)
par(mfrow=c(4, 4))  ## create a 4x4 plot
par(mar=c(2,2,2,2))
for (i in 1:length(y)) {
    for (j in rownames(y[[i]])) {  ## loop over greeks
        plot(S, y[[i]][j, ], main=paste(optlbl[i], j), ylab=j, type='l')
    }
}

@


\section{Binomial Pricing of European and American Options}

There are two functions related to binomial pricing:
\begin{description}
\item[binomopt] computes prices of American and European calls and
  puts. The function has three optional parameters that control output:
  \begin{itemize}
  \item \lstinline{returnparams=TRUE} will return as a vector the option
    pricing inputs, computed parameters, and risk-neutral probability.
    
  \item \lstinline{returngreeks=TRUE} will return as a vector the price,
    delta, gamma, and theta at the initial node.
  \item \lstinline{returntrees=TRUE} will return as a list the price,
    greeks, the full  stock price tree, the exercise status
    (\lstinline{TRUE} or \lstinline{FALSE}) at each node, and the
    replicating portfolio at each node.
  \end{itemize}
  
\item[binomplot] displays the asset price
  tree, the corresponding probability of being at each node, and
  whether or not the option is in exercised at each node. This
  function is described in more detail in Section \ref{sec:binomplot}.
\end{description}

Here are examples of pricing, illustrating the default of just
returning the price, and the ability to return the price plus
parameters, as well as the price, the parameters, and various trees:

<<>>=
s <- 100; k <- 100; r <- 0.08; v <- 0.30; tt <- 2; d <- 0.03
binomopt(s, k, v, r, tt, d, nstep=3)
binomopt(s, k, v, r, tt, d, nstep=3, returnparams=TRUE)
binomopt(s, k, v, r, tt, d, nstep=3, putopt=TRUE)
binomopt(s, k, v, r, tt, d, nstep=3, returntrees=TRUE, putopt=TRUE)
@



\section{Asian Options}

There are analytical functions for valuing geometric Asian options and
Monte Carlo routines for valuing arithmetic Asian options. 

\subsection{Geometric Asian Options}

Geometric Asian options can be valued using the Black-Scholes formulas
for vanilla calls and puts, with modified inputs. The functions return
both call and put prices with a named vector:

<<>>=
geomavgprice(s, k, v, r, tt, d, 3)
geomavgstrike(s, k, v, r, tt, d, 3)

@ 

\subsection{Arithmetic Asian Options}

Monte Carlo valuation is used to price arithmetic Asian options. For
efficiency, the function \lstinline{arithasianmc} returns call and put
prices for average price and average strike options. By default the
number of simulations is 1000. Optionally the function returns the
standard deviation of each estimate

<<>>=
arithasianmc(s, k, v, r, tt, d, 3, numsim=5000, printsds=TRUE)

@ 

The function \lstinline{arithavgpricecv} uses the control variate
method to reduce the variance in the simulation. At the moment this
function prices only calls, and returns both the price and the
regression coefficient used in the control variate correction:

<<>>=
arithavgpricecv(s, k, v, r, tt, d, 3, numsim=5000)

@ 
\section{Jumps and Stochastic Volatility}
\label{sec:jumps}

The \lstinline{mertonjump} function returns call and put prices for a
stock that can jump discretely. A poisson process controls the
occurrence of a jump and the size of the jump is lognormally
distributed. The parameter \lstinline{lambda} is the mean number of
jumps per year,  the parameter \lstinline{alphaj} is the log of the
expected jump, and \lstinline{sigmaj} is the standard deviation of the
log of the jump. The jump amount is thus drawn from the distribution
\begin{equation*}
  Y \sim \mathcal{N}(\alpha_{J} - 0.5\sigma^{2}_{J}, \sigma_{J}^{2} )
\end{equation*}

<<>>=
mertonjump(s, k, v, r, tt, d, lambda=0.5, alphaj=-0.2, vj=0.3)
c(bscall(s, k, v, r, tt, d), bsput(s, k, v, r, tt, d))
@ 

\section{Bonds}

The simple bond functions provided in this version compute the present
value of cash flows (|bondpv|), the IRR of the bond (|bondyield|),
Macaulay duration (|duration|), and convexity (|convexity|).

<<>>=
coupon <- 8; mat <- 20; yield <- 0.06; principal <- 100; 
modified <- FALSE; freq <- 2
price <- bondpv(coupon, mat, yield, principal, freq)
price
bondyield(price, coupon, mat, principal, freq)
duration(price, coupon, mat, principal, freq, modified)
convexity(price, coupon, mat, principal, freq)

@ 



\section{Functions with Graphical Output}


Several functions provide visual illustrations of some aspects of the
material.

\subsection{Quincunx or Galton Board}

The quincunx is a physical device the illustrates the central limit
theorem. A ball rolls down a pegboard and strikes a peg, falling
randomly either to the left or right. As it continues down the board
it continues to strike a series of pegs, randomly falling left or
right at each. The balls
collect in bins and create an approximate normal distribution. 

The quincunx function allows the user to simulate a quincunx,
observing the path of each ball and watching the height of each bin as
the balls accumulate. More interestingly, the quincunx function
permits altering the probability that the ball will fall to the
right. 

Figure \ref{fig:quincunx} illustrates the function after dropping 200
balls down 20 levels of pegs with a 70\% probability that each ball
will fall right:

<<quincunx, fig.cap='Output from the Quincunx function'>>=
par(mar=c(2,2,2,2))
quincunx(n=20, numballs=200, delay=0, probright=0.7)
@ 

\subsection{Plotting the Solution to the Binomial Pricing Model}
\label{sec:binomplot}

The |binomplot| function calls |binomopt| to compute the option price
and the various trees, which it then uses in plotting:

The first plot, figure \ref{fig:binomplot1}, is basic:

<<binomplot1, fig.cap='Basic option plot showing stock prices and nodes at which the option is exercised.\\label{fig:binomplot1}'>>=
binomplot(s, k, v, r, tt, d, nstep=6, american=TRUE, putopt=TRUE)

@

The second plot, figure \ref{fig:binomplot2}, adds a display of stock
prices and arrows connecting the nodes.

<<binomplot2, fig.cap='Same plot as Figure \\ref{fig:binomplot1} except that values and arrows are added to the plot.\\label{fig:binomplot2}'>>=
binomplot(s, k, v, r, tt, d, nstep=6, american=TRUE, putopt=TRUE,
    plotvalues=TRUE, plotarrows=TRUE)
@

As a final example, consider an American call when the dividend yield
is positive and |nstep| has a larger value. Figure
\ref{fig:binomplot3} shows the plot, with early exercise evident.

<<binomplot3, fig.cap="Binomial plot when nstep is 40.\\label{fig:binomplot3}">>=
d <- 0.06
binomplot(s, k, v, r, tt, d, nstep=40, american=TRUE)
@

The large value of |nstep| creates a high maximum terminal stock
price, which makes details hard to discern in the boundary region
where exercise first occurrs. We can zoom in on that region by
selecting values for |ylimval|; the result is in Figure \ref{fig:binomplot4}.

<<binomplot4, fig.cap="Binomial plot when nstep is 40 using the argument ylimval to focus on a subset.\\label{fig:binomplot4}">>=
d <- 0.06
binomplot(s, k, v, r, tt, d, nstep=40, american=TRUE, ylimval=c(75, 225))
@




\end{document}
